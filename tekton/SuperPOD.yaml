apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: superpod
spec:
  description: |
    This pipeline builds a container image using buildah and enroot, and then runs it.
    It uses the git-clone task to fetch the code from a git repository.
    The pipeline uses a shared workspace to store the cloned code and the built image.
  params:
    - default: 'true'
      description: para saltar el enroot
      name: skip-enroot
      type: string
    - description: image to be "enrooted" and executed
      default: superpod.sqfs
      name: IMAGE
      type: string
    - name : git-url
      type: string
      description: url of the git repo for the code of deployment
    - default: main
      description: revision to be used from repo of the code for deployment
      name: git-revision
      type: string
    - description: path to the Dockerfile
      name: CONTAINERFILE_PATH
      type: string
    - description: path to the subdirectory of the Dockerfile
      name: SUBDIRECTORY
      type: string
    - description: destination image url
      name: DESTINATION_IMAGE_URL
      type: string
    - default: user
      description: |
        User to be used for ssh connection
      name: SSH_USER
      type: string
    - default: remote
      description: |
        Host to connect to
      name: SSH_HOST
      type: string
    - default: ""
      description: |
        Remote directory where the image is copied to
      name: SSH_DIRECTORY
      type: string
    - default: 1
      description: |
        Number of nodes to be used for the task.
      name: NODES
      type: string
    - name: WORKERS
      description: |
        Worker nodes to be used for the task.
      type: string
    - default: 1
      description: |
        Number of GPUs to be used for the task.
      name: GPUS
      type: string
    - default: myjob
      description: |
        Name of the job to be used for the task.
      name: JOB_NAME
      type: string
    - default: 02:00:00
      description: |
        Time limit for the job to be used for the task.
      name: TIME
      type: string
    - default: "echo 'Hello World'"
      description: |
        Command to be executed in the remote server.
      name: COMMAND
      type: string
  tasks:
    - name: fetch-repository
      params:
        - name: URL
          value: $(params.git-url)
        - name: SUBDIRECTORY
          value: ''
        - name: DELETE_EXISTING
          value: 'true'
        - name: REVISION
          value: $(params.git-revision)
      taskRef:
        params:
          - name: kind
            value: task
          - name: name
            value: git-clone-1-17-0
          - name: namespace
            value: openshift-pipelines
        resolver: cluster
      workspaces:
        - name: output
          workspace: shared-workspace
# Reference https://github.com/openshift-pipelines/task-containers/blob/main/docs/task-buildah.md
# hay que crear el secreto con las credenciales para el registry, v√©ase https://tekton.dev/docs/pipelines/auth/#configuring-docker-authentication-for-docker
    - name: build-image
      params:
        - name: IMAGE
          value: "$(params.DESTINATION_IMAGE_URL)"
        - name: DOCKERFILE
          value: "$(params.CONTAINERFILE_PATH)/Dockerfile"
        - name: CONTEXT
          value: "$(params.SUBDIRECTORY)"
        - name: TLS_VERIFY
          value: false
        - name: VERBOSE
          value: false
      runAfter:
        - fetch-repository
      taskRef:
        params:
          - name: kind
            value: task
          - name: name
            value: buildah
          - name: namespace
            value: openshift-pipelines
        resolver: cluster
      workspaces:
        - name: source
          workspace: shared-workspace
        - name: dockerconfig
          workspace: docker-config
    - name: enroot-image
#### https://github.com/NVIDIA/enroot/blob/master/doc/usage.md
#### la URI de la imagen es diferente a la de buildah cuando se usa docker
      when:
      - input: "$(params.skip-enroot)"
        operator: notin
        values: ["true"]
      params:
        - name: IMAGE
          value: $(params.DESTINATION_IMAGE_URL)
        - name: IMAGE_OUTPUT
          value: "$(params.IMAGE)"
        - name: VERBOSE 
          value: false
      runAfter:
        - build-image
      taskRef:
        kind: Task
        name: enroot
      workspaces:
        - name: imagedirectory
          workspace: shared-workspace
        - name: dockerconfig
          workspace: docker-config
    - name: scp-run-collect
      params:
        - name: IMAGE
          value: "$(params.IMAGE)"
        - name: SSH_USER
          value: $(params.SSH_USER)
        - name: SSH_HOST
          value: $(params.SSH_HOST)
        - name: SSH_DIRECTORY
          value: $(params.SSH_DIRECTORY)
        - name: NODES
          value: $(params.NODES)
        - name: WORKERS
          value: $(params.WORKERS)
        - name: GPUS
          value: $(params.GPUS)
        - name: JOB_NAME
          value: $(params.JOB_NAME)
        - name: TIME
          value: $(params.TIME)
        - name: COMMAND
          value: $(params.COMMAND)
      runAfter:
        - enroot-image
      taskRef:
        kind: Task
        name: superpod-ssh
      workspaces:
        - name: ssh-directory
          workspace: ssh-directory
        - name: imagedirectory
          workspace: shared-workspace
  workspaces:
    - name: shared-workspace
    - name: ssh-directory
    - name: docker-config
