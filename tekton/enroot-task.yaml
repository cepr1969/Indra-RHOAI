apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: enroot
spec:
  description: A Task for enroot an image
  params:
    - default: 'false'
      description: |
        Log the executed commands.
      name: VERBOSE
      type: string
    - name: IMAGE
      type: string
      description: |
        The image to be enrooted in a registry accessible from the cluster. Format registry_name:registry_port/path/to/image:tag
    - name: IMAGE_OUTPUT
      type: string
      description: |
        The name for the enrootrd image, name.sqfs
  results:
    - description: |
        A simple result
      name: simpleresult
      type: string
  stepTemplate:
    computeResources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 256Mi
    env:
      - name: PARAMS_VERBOSE
        value: $(params.VERBOSE)
      - name: PARAMS_IMAGE
        value: $(params.IMAGE)
      - name: PARAMS_IMAGE_OUTPUT
        value: $(params.IMAGE_OUTPUT)
      - name: WORKSPACES_IMAGEDIRECTORY_BOUND
        value: $(workspaces.imagedirectory.bound)
      - name: WORKSPACES_IMAGEDIRECTORY_PATH
        value: $(workspaces.imagedirectory.path)
      - name: WORKSPACES_DOCKERCONFIG_BOUND
        value: $(workspaces.dockerconfig.bound)
      - name: WORKSPACES_DOCKERCONFIG_PATH
        value: $(workspaces.dockerconfig.path)
  steps:
    - computeResources: {}
      image: 'registry.mlops.software.bl.platform:8443/superpod/ubi9-enroot:latest'
      name: prepare-and-run
      script: |
        set -e
        printf '%s' "IyEvdXNyL2Jpbi9lbnYgYmFzaAojCiMgV3JhcHBlciBhcm91bmQgImVucm9vdCBpbXBvcnQiIHRvIGVucm9vdCBhIGNvbnRhaW5lciBpbWFnZS4KIwoKc2hvcHQgLXMgaW5oZXJpdF9lcnJleGl0CnNldCAtZXUgLW8gcGlwZWZhaWwKCnNvdXJjZSAiJChkaXJuYW1lICR7QkFTSF9TT1VSQ0VbMF19KS9jb21tb24uc2giCnNvdXJjZSAiJChkaXJuYW1lICR7QkFTSF9TT1VSQ0VbMF19KS9lbnJvb3QtY29tbW9uLnNoIgoKZnVuY3Rpb24gX2Vucm9vdCgpIHsKICAgIGVucm9vdCBcCiAgICAgICAgJHsqfQp9CgojCiMgUHJlcGFyZQojCgojIG1ha2luZyBzdXJlIHRoZSByZXF1aXJlZCB3b3Jrc3BhY2UgImltYWdlZGlyIiBpcyBib3VuZGVkLCB3aGljaCBtZWFucyBpdHMgdm9sdW1lIGlzIGN1cnJlbnRseSBtb3VudGVkCiMgYW5kIHJlYWR5IHRvIHVzZQpwaGFzZSAiSW5zcGVjdGluZyBzb3VyY2Ugd29ya3NwYWNlICcke1dPUktTUEFDRVNfSU1BR0VESVJFQ1RPUllfUEFUSH0nIChQV0Q9JyR7UFdEfScpIgpbWyAiJHtXT1JLU1BBQ0VTX0lNQUdFRElSRUNUT1JZX0JPVU5EfSIgIT0gInRydWUiIF1dICYmCiAgICBmYWlsICJXb3Jrc3BhY2UgJ2ltYWdlZGlyJyBpcyBub3QgYm91bmRlZCIKCiMgSGFuZGxlIG9wdGlvbmFsIGRvY2tlcmNvbmZpZyBzZWNyZXQKaWYgW1sgIiR7V09SS1NQQUNFU19ET0NLRVJDT05GSUdfQk9VTkR9IiA9PSAidHJ1ZSIgXV07IHRoZW4KCiAgICAjIGlmIGNvbmZpZy5qc29uIGV4aXN0cyBhdCB3b3Jrc3BhY2Ugcm9vdCwgd2UgdXNlIHRoYXQKICAgIGlmIHRlc3QgLWYgIiR7V09SS1NQQUNFU19ET0NLRVJDT05GSUdfUEFUSH0vY29uZmlnLmpzb24iOyB0aGVuCiAgICAgICAgZXhwb3J0IERPQ0tFUl9DT05GSUc9IiR7V09SS1NQQUNFU19ET0NLRVJDT05GSUdfUEFUSH0iCgogICAgICAgICMgZWxzZSB3ZSBsb29rIGZvciAuZG9ja2VyY29uZmlnanNvbiBhdCB0aGUgcm9vdAogICAgZWxpZiB0ZXN0IC1mICIke1dPUktTUEFDRVNfRE9DS0VSQ09ORklHX1BBVEh9Ly5kb2NrZXJjb25maWdqc29uIjsgdGhlbgogICAgICAgICMgZW5zdXJlIC5kb2NrZXIgZXhpc3QgYmVmb3JlIHRoZSBjb3B5aW5nIHRoZSBjb250ZW50CiAgICAgICAgaWYgWyAhIC1kICIkSE9NRS8uZG9ja2VyIiBdOyB0aGVuCiAgICAgICAgICAgbWtkaXIgLXAgIiRIT01FLy5kb2NrZXIiCiAgICAgICAgZmkKICAgICAgICBjcCAiJHtXT1JLU1BBQ0VTX0RPQ0tFUkNPTkZJR19QQVRIfS8uZG9ja2VyY29uZmlnanNvbiIgIiRIT01FLy5kb2NrZXIvY29uZmlnLmpzb24iCiAgICAgICAgZXhwb3J0IERPQ0tFUl9DT05GSUc9IiRIT01FLy5kb2NrZXIiCgogICAgICAgICMgbmVlZCB0byBlcnJvciBvdXQgaWYgbmVpdGhlciBmaWxlcyBhcmUgcHJlc2VudAogICAgZWxzZQogICAgICAgIGVjaG8gIm5laXRoZXIgJ2NvbmZpZy5qc29uJyBub3IgJy5kb2NrZXJjb25maWdqc29uJyBmb3VuZCBhdCB3b3Jrc3BhY2Ugcm9vdCIKICAgICAgICBleGl0IDEKICAgIGZpCmZpCgoKIwojIEltcG9ydAojCgpwaGFzZSAiQ3JlYXRpbmcgJyR7UEFSQU1TX0lNQUdFX09VVFBVVH0nIGJhc2VkIG9uICcke1BBUkFNU19JTUFHRX0nIgojIyMjIGhheSBxdWUgcGFzYXIgZGUgJHtSRUdJU1RSWV9OQU1FfToke1JFR0lTVFJZX1BPUlR9LyR7SU1BR0VfTkFNRX06JHtJTUFHRV9UQUd9IGEgJHtSRUdJU1RSWV9OQU1FfToke1JFR0lTVFJZX1BPUlR9IyR7SU1BR0VfTkFNRX06JHtJTUFHRV9UQUd9ClVSST1gZWNobyAiJHtQQVJBTVNfSU1BR0V9IiB8IHNlZCAtZSAncy9cXC8vIy8nYAoKX2Vucm9vdCBpbXBvcnQgXAogICAgLS1vdXRwdXQgIiR7UEFSQU1TX0lNQUdFX09VVFBVVH0iIFwKICAgICJkb2NrZXI6Ly8ke1VSSX0iIFwKCgojCiMgUmVzdWx0cwojCgpwaGFzZSAiUmVzdWx0cyIKZWNobyAtbiAiJHtQQVJBTVNfSU1BR0V9IiB8IHRlZSAke1JFU1VMVFNfSU1BR0VfVVJMX1BBVEh9CmVjaG8gLW4gIiR7UEFSQU1TX0lNQUdFX09VVFBVVH0iIHwgdGVlICR7UkVTVUxUU19JTUFHRV9ESUdFU1RfUEFUSH0K" |base64 -d >"/scripts/enroot-import.sh"
        printf '%s' "IyEvdXNyL2Jpbi9lbnYgYmFzaAoKZGVjbGFyZSAtcnggUEFSQU1TX0lNQUdFPSIke1BBUkFNU19JTUFHRTotfSIKZGVjbGFyZSAtcnggUEFSQU1TX0lNQUdFX09VVFBVVD0iJHtQQVJBTVNfSU1BR0VfT1VUUFVUOi19IgpkZWNsYXJlIC1yeCBQQVJBTVNfVExTX1ZFUklGWT0iJHtQQVJBTVNfVExTX1ZFUklGWTotfSIKZGVjbGFyZSAtcnggUEFSQU1TX1ZFUkJPU0U9IiR7UEFSQU1TX1ZFUkJPU0U6LX0iCgpkZWNsYXJlIC1yeCBXT1JLU1BBQ0VTX0lNQUdFRElSRUNUT1JZX1BBVEg9IiR7V09SS1NQQUNFU19JTUFHRURJUkVDVE9SWV9QQVRIOi19IgpkZWNsYXJlIC1yeCBXT1JLU1BBQ0VTX0lNQUdFRElSRUNUT1JZX0JPVU5EPSIke1dPUktTUEFDRVNfSU1BR0VESVJFQ1RPUllfQk9VTkQ6LX0iCmRlY2xhcmUgLXJ4IFdPUktTUEFDRVNfRE9DS0VSQ09ORklHX1BBVEg9IiR7V09SS1NQQUNFU19ET0NLRVJDT05GSUdfUEFUSDotfSIKZGVjbGFyZSAtcnggV09SS1NQQUNFU19ET0NLRVJDT05GSUdfQk9VTkQ9IiR7V09SS1NQQUNFU19ET0NLRVJDT05GSUdfQk9VTkQ6LX0iCgojCiMgQXNzZXJ0aW5nIEVudmlyb25tZW50CiMKCmV4cG9ydGVkX29yX2ZhaWwgXAogICAgV09SS1NQQUNFU19JTUFHRURJUkVDVE9SWV9QQVRIIFwKICAgIFBBUkFNU19JTUFHRQoKIwojIFZlcmJvc2UgT3V0cHV0CiMKCmlmIFtbICIke1BBUkFNU19WRVJCT1NFfSIgPT0gInRydWUiIF1dOyB0aGVuCiAgICBzZXQgLXgKZmkK" |base64 -d >"/scripts/enroot-common.sh"
        printf '%s' "IyEvdXNyL2Jpbi9lbnYgYmFzaAoKIyB0ZWt0b24ncyBob21lIGRpcmVjdG9yeQpkZWNsYXJlIC1yeCBURUtUT05fSE9NRT0iJHtURUtUT05fSE9NRTotL3Rla3Rvbi9ob21lfSIKCiMKIyBGdW5jdGlvbnMKIwoKZnVuY3Rpb24gZmFpbCgpIHsKICAgIGVjaG8gIkVSUk9SOiAkeyp9IiAyPiYxCiAgICBleGl0IDEKfQoKZnVuY3Rpb24gcGhhc2UoKSB7CiAgICBlY2hvICItLS0+IFBoYXNlOiAkeyp9Li4uIgp9CgojIGFzc2VydCBsb2NhbCB2YXJpYWJsZXMgYXJlIGV4cG9ydGVkIG9uIHRoZSBlbnZpcm9ubWVudApmdW5jdGlvbiBleHBvcnRlZF9vcl9mYWlsKCkgewogICAgZGVjbGFyZSAtYSBfcmVxdWlyZWRfdmFycz0iJHtAfSIKCiAgICBmb3IgdiBpbiAke19yZXF1aXJlZF92YXJzW0BdfTsgZG8KICAgICAgICBbWyAteiAiJHshdn0iIF1dICYmCiAgICAgICAgICAgIGZhaWwgIicke3Z9JyBlbnZpcm9ubWVudCB2YXJpYWJsZSBpcyBub3Qgc2V0ISIKICAgIGRvbmUKCiAgICByZXR1cm4gMAp9Cg==" |base64 -d >"/scripts/common.sh"
        chmod +x /scripts/*.sh;echo "Running Script /scripts/enroot-import.sh";
            /scripts/enroot-import.sh;
      securityContext:
        capabilities:
          add:
            - SETFCAP
      volumeMounts:
        - mountPath: /scripts
          name: scripts-dir
  volumes:
    - emptyDir: {}
      name: scripts-dir
  workspaces:
    - description: |
        A directory for storing the .sqsh image.
      name: imagedirectory
    - description: An optional workspace that allows providing a .docker/config.json file for Buildah to access the container registry. The file should be placed at the root of the Workspace with name config.json or .dockerconfigjson.
      name: dockerconfig
      optional: true
